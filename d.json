{
  "webhooks": {
    "state": "ready",
    "state_message": "Printer is ready"
  },
  "configfile": {
    "config": {
      "mcu": {
        "serial": "/dev/serial/by-id/usb-Klipper_stm32f446xx_25003C001750344D30353320-if00",
        "restart_method": "command"
      },
      "printer": {
        "kinematics": "corexy",
        "max_velocity": "600",
        "max_accel": "6000",
        "max_z_velocity": "30",
        "max_z_accel": "350",
        "square_corner_velocity": "5.0"
      },
      "stepper_x": {
        "step_pin": "PF13",
        "dir_pin": "PF12",
        "enable_pin": "!PF14",
        "rotation_distance": "40",
        "microsteps": "32",
        "full_steps_per_rotation": "200",
        "endstop_pin": "PG6",
        "position_min": "0",
        "position_endstop": "350",
        "position_max": "350",
        "homing_speed": "90",
        "homing_retract_dist": "5",
        "homing_positive_dir": "true"
      },
      "tmc2209 stepper_x": {
        "uart_pin": "PC4",
        "interpolate": "false",
        "run_current": "1.0",
        "sense_resistor": "0.110",
        "stealthchop_threshold": "0"
      },
      "stepper_y": {
        "step_pin": "PG0",
        "dir_pin": "PG1",
        "enable_pin": "!PF15",
        "rotation_distance": "40",
        "microsteps": "32",
        "full_steps_per_rotation": "200",
        "endstop_pin": "PG9",
        "position_min": "0",
        "position_endstop": "350",
        "position_max": "350",
        "homing_speed": "90",
        "homing_retract_dist": "5",
        "homing_positive_dir": "true"
      },
      "tmc2209 stepper_y": {
        "uart_pin": "PD11",
        "interpolate": "false",
        "run_current": "1.0",
        "sense_resistor": "0.110",
        "stealthchop_threshold": "0"
      },
      "stepper_z": {
        "step_pin": "PF11",
        "dir_pin": "PG3",
        "enable_pin": "!PG5",
        "rotation_distance": "40",
        "gear_ratio": "80:16",
        "microsteps": "32",
        "endstop_pin": "PG10",
        "position_max": "310",
        "position_min": "-5",
        "homing_speed": "8",
        "second_homing_speed": "3",
        "homing_retract_dist": "3",
        "position_endstop": "1.410"
      },
      "tmc2209 stepper_z": {
        "uart_pin": "PC6",
        "interpolate": "false",
        "run_current": "0.8",
        "sense_resistor": "0.110",
        "stealthchop_threshold": "0"
      },
      "stepper_z1": {
        "step_pin": "PG4",
        "dir_pin": "!PC1",
        "enable_pin": "!PA0",
        "rotation_distance": "40",
        "gear_ratio": "80:16",
        "microsteps": "32"
      },
      "tmc2209 stepper_z1": {
        "uart_pin": "PC7",
        "interpolate": "false",
        "run_current": "0.8",
        "sense_resistor": "0.110",
        "stealthchop_threshold": "0"
      },
      "stepper_z2": {
        "step_pin": "PF9",
        "dir_pin": "PF10",
        "enable_pin": "!PG2",
        "rotation_distance": "40",
        "gear_ratio": "80:16",
        "microsteps": "32"
      },
      "tmc2209 stepper_z2": {
        "uart_pin": "PF2",
        "interpolate": "false",
        "run_current": "0.8",
        "sense_resistor": "0.110",
        "stealthchop_threshold": "0"
      },
      "stepper_z3": {
        "step_pin": "PC13",
        "dir_pin": "!PF0",
        "enable_pin": "!PF1",
        "rotation_distance": "40",
        "gear_ratio": "80:16",
        "microsteps": "32"
      },
      "tmc2209 stepper_z3": {
        "uart_pin": "PE4",
        "interpolate": "false",
        "run_current": "0.8",
        "sense_resistor": "0.110",
        "stealthchop_threshold": "0"
      },
      "extruder": {
        "step_pin": "PE2",
        "dir_pin": "PE3",
        "enable_pin": "!PD4",
        "rotation_distance": "22.225372078",
        "max_extrude_cross_section": "0.70",
        "gear_ratio": "50:10",
        "microsteps": "32",
        "full_steps_per_rotation": "200",
        "nozzle_diameter": "0.400",
        "filament_diameter": "1.75",
        "heater_pin": "PA2",
        "sensor_type": "ATC Semitec 104NT-4-R025H42G",
        "sensor_pin": "PF4",
        "min_temp": "10",
        "max_temp": "300",
        "max_power": "1.0",
        "min_extrude_temp": "170",
        "pressure_advance": "0.025",
        "control": "pid",
        "pid_kp": "16.476",
        "pid_ki": "1.132",
        "pid_kd": "59.930"
      },
      "tmc2209 extruder": {
        "uart_pin": "PE1",
        "interpolate": "false",
        "run_current": "0.5",
        "sense_resistor": "0.110",
        "stealthchop_threshold": "0"
      },
      "heater_bed": {
        "heater_pin": "PA3",
        "sensor_type": "Generic 3950",
        "sensor_pin": "PF3",
        "max_power": "0.6",
        "min_temp": "0",
        "max_temp": "120",
        "control": "pid",
        "pid_kp": "38.625",
        "pid_ki": "1.551",
        "pid_kd": "240.443"
      },
      "probe": {
        "pin": "PG15",
        "x_offset": "0",
        "y_offset": "25.0",
        "z_offset": "0",
        "speed": "10.0",
        "samples": "3",
        "samples_result": "median",
        "sample_retract_dist": "3.0",
        "samples_tolerance": "0.006",
        "samples_tolerance_retries": "3"
      },
      "fan": {
        "pin": "PE5",
        "kick_start_time": "0.5",
        "off_below": "0.10"
      },
      "heater_fan hotend_fan": {
        "pin": "PA8",
        "max_power": "1.0",
        "kick_start_time": "0.5",
        "heater": "extruder",
        "heater_temp": "50.0"
      },
      "controller_fan controller_fan": {
        "pin": "PD12",
        "kick_start_time": "0.5",
        "heater": "heater_bed",
        "fan_speed": "1.0",
        "idle_timeout": "30",
        "idle_speed": "0"
      },
      "temperature_fan exhaust_fan": {
        "sensor_type": "Generic 3950",
        "sensor_pin": "PF5",
        "pin": "PD14",
        "shutdown_speed": "0",
        "kick_start_time": "0.5",
        "off_below": "0.21",
        "min_temp": "0",
        "max_temp": "55.0",
        "target_temp": "35.0",
        "max_speed": "1",
        "min_speed": "0.2",
        "control": "pid",
        "pid_kp": "2.0",
        "pid_ki": "5.0",
        "pid_kd": "0.5",
        "pid_deriv_time": "2.0"
      },
      "temperature_fan pi_temp": {
        "sensor_type": "temperature_host",
        "pin": "PD13",
        "shutdown_speed": "0",
        "min_temp": "10",
        "max_temp": "80",
        "off_below": "0.21",
        "kick_start_time": "0.5",
        "target_temp": "55.0",
        "control": "watermark",
        "max_speed": "1.0",
        "min_speed": "0.2"
      },
      "filament_switch_sensor runout_sensor": {
        "pause_on_runout": "True",
        "switch_pin": "!PG11"
      },
      "led case_light": {
        "white_pin": "PD15",
        "initial_white": "0.5"
      },
      "menu __main __octoprint": {
        "type": "disabled"
      },
      "menu __main __control __caselight": {
        "type": "input",
        "enable": "{'led case_light' in printer}",
        "name": "Light: {'%3d' % (menu.input*100)}%",
        "input": "{printer['led case_light'].color_data[0][3]}",
        "input_min": "0",
        "input_max": "1",
        "input_step": "0.01",
        "gcode": "\nSET_LED LED=case_light WHITE={menu.input} SYNC=0 TRANSMIT=1"
      },
      "menu __main __control __lcdlight": {
        "type": "input",
        "enable": "{'neopixel btt_mini12864' in printer}",
        "name": "LCD: {'%3d' % (menu.input*100)}%",
        "input": "{printer['neopixel btt_mini12864'].color_data[0][1]}",
        "input_min": "0",
        "input_max": "1",
        "input_step": "0.01",
        "gcode": "\nSET_LED LED=\"btt_mini12864\" RED=0 GREEN={menu.input} BLUE=0 SYNC=0 TRANSMIT=1"
      },
      "idle_timeout": {
        "timeout": "1800"
      },
      "safe_z_home": {
        "home_xy_position": "232,347",
        "speed": "150",
        "z_hop": "10"
      },
      "quad_gantry_level": {
        "gantry_corners": "\n-60,-10\n410,420",
        "points": "\n50,25\n50,275\n300,275\n300,25",
        "speed": "400",
        "horizontal_move_z": "5",
        "retries": "5",
        "retry_tolerance": "0.0075",
        "max_adjust": "10"
      },
      "board_pins": {
        "aliases": "\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>"
      },
      "display": {
        "lcd_type": "uc1701",
        "cs_pin": "EXP1_3",
        "a0_pin": "EXP1_4",
        "rst_pin": "EXP1_5",
        "encoder_pins": "^EXP2_5, ^EXP2_3",
        "click_pin": "^!EXP1_2",
        "contrast": "63",
        "spi_software_miso_pin": "EXP2_1",
        "spi_software_mosi_pin": "EXP2_6",
        "spi_software_sclk_pin": "EXP2_2",
        "menu_reverse_navigation": "true"
      },
      "neopixel btt_mini12864": {
        "pin": "EXP1_6",
        "chain_count": "3",
        "initial_red": "0.1",
        "initial_green": "0.5",
        "initial_blue": "0.0",
        "color_order": "RGB"
      },
      "bed_mesh": {
        "speed": "250",
        "horizontal_move_z": "5",
        "mesh_min": "15, 35",
        "mesh_max": "320, 320",
        "probe_count": "5, 5",
        "relative_reference_index": "12"
      },
      "adxl345": {
        "cs_pin": "PA15",
        "spi_bus": "spi3"
      },
      "resonance_tester": {
        "accel_chip": "adxl345",
        "probe_points": "\n175,175,170"
      },
      "input_shaper": {
        "shaper_freq_x": "49.8",
        "shaper_type_x": "mzv",
        "shaper_freq_y": "32.2",
        "shaper_type_y": "mzv"
      },
      "exclude_object": {},
      "gcode_macro PRINT_START_CHECK": {
        "gcode": "\n{% if not printer[\"filament_switch_sensor runout_sensor\"].filament_detected %}\nM117 No filament, aborting\n\nPRINT_END\nM112\n{% endif %}"
      },
      "gcode_macro PARK": {
        "gcode": "\n{% set th = printer.toolhead %}\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30"
      },
      "gcode_macro G32": {
        "gcode": "\nSAVE_GCODE_STATE NAME=STATE_G32\nSTATUS_HOMING\nG90\nG28\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL\nSTATUS_HOMING\nG28\nSTATUS_LEVELING\nBED_MESH_CALIBRATE\nSTATUS_HOMING\nG28\nSTATUS_BUSY\n\nRESTORE_GCODE_STATE NAME=STATE_G32"
      },
      "gcode_macro PRINT_START": {
        "gcode": "\nPRINT_START_CHECK\nSET_LED LED=\"btt_mini12864\" RED=0.2235 GREEN=1 BLUE=0 SYNC=0 TRANSMIT=1\nSET_LED LED=case_light WHITE=1.00 SYNC=0 TRANSMIT=1\nG32\nSET_GCODE_OFFSET Z=-0.210\nSAVE_GCODE_STATE NAME=PRIME_NOZZLE_STATE\nSTATUS_BUSY\nM117 Priming\nG90\nM83\nG92 E0\nG1 Z10 F900\nG1 Y3 X3 F18000\nG1 Z0.2 F900\nG91\nG1 X100 E25 F1000\nG1 Y-2 F1000\nG1 X-60 E9 F1000\nG1 E-0.5 F3000\nG1 X0.5 E0 F1000\nG1 X-5.5 E0 F1000\nRESTORE_GCODE_STATE NAME=PRIME_NOZZLE_STATE\nG90\nG1 Z2 F3000\nM117 Printing\nSTATUS_PRINTING"
      },
      "gcode_macro G28": {
        "rename_existing": "G28.1",
        "gcode": "\nSTATUS_HOMING\n{% if rawparams %}\nG28.1 {rawparams}\n{% else %}\nG28.1\n{% endif %}\nSTATUS_OFF"
      },
      "gcode_macro PRINT_END": {
        "gcode": "\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nSTATUS_OFF\nSET_LED LED=\"btt_mini12864\" RED=0 GREEN=0.2 BLUE=0 SYNC=0 TRANSMIT=1\nSET_LED LED=case_light WHITE=0 SYNC=0 TRANSMIT=1\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END"
      },
      "gcode_macro TEST_SPEED": {
        "gcode": "\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info(\"TEST_SPEED: starting %d iterations at speed %d, accel %d\" % (iterations, speed, accel)) }\n\n\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED"
      },
      "virtual_sdcard": {
        "path": "~/printer_data/gcodes",
        "on_error_gcode": "CANCEL_PRINT"
      },
      "pause_resume": {},
      "display_status": {},
      "gcode_macro CANCEL_PRINT": {
        "description": "Cancel the actual running print",
        "rename_existing": "CANCEL_PRINT_BASE",
        "gcode": "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == 'true'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = \"\"                                    if not macro_found\nelse \"\"                                    if client.park_at_cancel_x is not defined\nelse \"X=\" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = \"\"                                    if not macro_found\nelse \"\"                                    if client.park_at_cancel_y is not defined\nelse \"Y=\" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE"
      },
      "gcode_macro PAUSE": {
        "description": "Pause the actual running print",
        "rename_existing": "PAUSE_BASE",
        "gcode": "\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE=\"{printer[printer.toolhead.extruder].target}\"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}"
      },
      "gcode_macro RESUME": {
        "description": "Resume the actual running print",
        "rename_existing": "RESUME_BASE",
        "variable_last_extruder_temp": "0",
        "gcode": "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}"
      },
      "gcode_macro SET_PAUSE_NEXT_LAYER": {
        "description": "Enable a pause if the next layer is reached",
        "gcode": "\n{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE=\"{{ 'enable': ENABLE, 'call': MACRO }}\""
      },
      "gcode_macro SET_PAUSE_AT_LAYER": {
        "description": "Enable/disable a pause if a given layer number is reached",
        "gcode": "\n{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE=\"{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}\""
      },
      "gcode_macro SET_PRINT_STATS_INFO": {
        "rename_existing": "SET_PRINT_STATS_INFO_BASE",
        "description": "Overwrite, to get pause_next_layer and pause_at_layer feature",
        "variable_pause_next_layer": "{ 'enable': False, 'call': \"PAUSE\" }",
        "variable_pause_at_layer": "{ 'enable': False, 'layer': 0, 'call': \"PAUSE\" }",
        "gcode": "\n{% if pause_next_layer.enable %}\n{action_respond_info(\"%s, forced by pause_next_layer\" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info(\"%s, forced by pause_at_layer [%d]\" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}"
      },
      "gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL": {
        "description": "Helper: park toolhead used in PAUSE and CANCEL_PRINT",
        "gcode": "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == 'true'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if \"xyz\" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info(\"Printer not homed\")}\n{% endif %}"
      },
      "gcode_macro _CLIENT_EXTRUDE": {
        "description": "Extrudes, if the extruder is hot enough",
        "gcode": "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info(\"Extruder not hot enough\")}\n{% endif %}"
      },
      "gcode_macro _CLIENT_RETRACT": {
        "description": "Retracts, if the extruder is hot enough",
        "gcode": "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"
      },
      "gcode_macro GET_TIMELAPSE_SETUP": {
        "description": "Print the Timelapse setup",
        "gcode": "\n{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}\n{% set output_txt = [\"Timelapse Setup:\"] %}\n{% set _dummy = output_txt.append(\"enable: %s\" % tl.enable) %}\n{% set _dummy = output_txt.append(\"park: %s\" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append(\"park position: %s time: %s s\" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append(\"park cord x:%s y:%s dz:%s\" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append(\"travel speed: %s mm/s\" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append(\"fw_retract: %s\" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append(\"retract: %s mm speed: %s mm/s\" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append(\"extrude: %s mm speed: %s mm/s\" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append(\"verbose: %s\" % tl.verbose) %}\n{action_respond_info(output_txt|join(\"\\n\"))}"
      },
      "gcode_macro _SET_TIMELAPSE_SETUP": {
        "description": "Set user parameters for timelapse",
        "gcode": "\n{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']\nelse False %}\n{% set park = {'min'   : {'x': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n'y': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n'max'   : {'x': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n'y': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n'center': {'x': (max.x-(max.x-min.x)/2)|round(3),\n'y': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in ['true', 'false'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == 'true' else False}\n{% else %}\n{action_raise_error(\"ENABLE=%s not supported. Allowed values are [True, False]\" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in ['true', 'false'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == 'true' else False}\n{% else %}\n{action_raise_error(\"VERBOSE=%s not supported. Allowed values are [True, False]\" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({'x':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"CUSTOM_POS_X=%s must be within [%s - %s]\" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({'y':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"CUSTOM_POS_Y=%s must be within [%s - %s]\" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({'dz':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"CUSTOM_POS_DZ=%s must be within [%s - %s]\" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in ['true', 'false'] %}\n{% set _dummy = tl.park.update({'enable':True if params.PARK_ENABLE|lower == 'true' else False}) %}\n{% else %}\n{action_raise_error(\"PARK_ENABLE=%s not supported. Allowed values are [True, False]\" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in ['center','front_left','front_right','back_left','back_right','custom','x_only','y_only'] %}\n{% set dic = {'center'      : {'x': park.center.x   , 'y': park.center.y   , 'dz': 1                },\n'front_left'  : {'x': park.min.x      , 'y': park.min.y      , 'dz': 0                },\n'front_right' : {'x': park.max.x      , 'y': park.min.y      , 'dz': 0                },\n'back_left'   : {'x': park.min.x      , 'y': park.max.y      , 'dz': 0                },\n'back_right'  : {'x': park.max.x      , 'y': park.max.y      , 'dz': 0                },\n'custom'      : {'x': tl.park.custom.x, 'y': tl.park.custom.y, 'dz': tl.park.custom.dz},\n'x_only'      : {'x': tl.park.custom.x, 'y': 'none'          , 'dz': tl.park.custom.dz},\n'y_only'      : {'x': 'none'          , 'y': tl.park.custom.y, 'dz': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({'pos':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({'coord':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error(\"PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]\"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({'time':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"PARK_TIME=%s must be a positive number\" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE=\"{tl.park}\"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({'travel':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"TRAVEL_SPEED=%s must be larger than 0\" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({'retract':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"RETRACT_SPEED=%s must be larger than 0\" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({'extrude':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"EXTRUDE_SPEED=%s must be larger than 0\" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE=\"{tl.speed}\"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({'extrude':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"EXTRUDE_DISTANCE=%s must be specified as positiv number\" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({'retract':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"RETRACT_DISTANCE=%s must be specified as positiv number\" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in ['true', 'false'] %}\n{% if 'firmware_retraction' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({'fw_retract': True if params.FW_RETRACT|lower == 'true' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({'fw_retract':False}) %}\n{% if params.FW_RETRACT|capitalize == 'True' %}\n{action_raise_error(\"[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract\")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error(\"FW_RETRACT=%s not supported. Allowed values are [True, False]\" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE=\"{tl.extruder}\"\n{% if printer.configfile.settings['gcode_macro pause'] is defined %}\n{% set _dummy = tl.macro.update({'pause': printer.configfile.settings['gcode_macro pause'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings['gcode_macro resume'] is defined %}\n{% set _dummy = tl.macro.update({'resume': printer.configfile.settings['gcode_macro resume'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE=\"{tl.macro}\""
      },
      "gcode_macro TIMELAPSE_TAKE_FRAME": {
        "description": "Take Timelapse shoot",
        "variable_enable": "False",
        "variable_takingframe": "False",
        "variable_park": "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}",
        "variable_extruder": "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}",
        "variable_speed": "{'travel': 100,\n'retract': 15,\n'extrude': 15}",
        "variable_verbose": "True",
        "variable_restore": "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}",
        "variable_macro": "{'pause': 'PAUSE', 'resume': 'RESUME'}",
        "variable_is_paused": "False",
        "gcode": "\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}\n{% if enable %}\n{% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or\n(not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}\n{% if park.enable %}\n{% set pos = {'x': 'X' + park.coord.x|string if park.pos != 'y_only' else '',\n'y': 'Y' + park.coord.y|string if park.pos != 'x_only' else '',\n'z': 'Z'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,\n'extrude'    : printer.gcode_move.absolute_extrude},\n'speed'   : printer.gcode_move.speed,\n'e'       : printer.gcode_move.gcode_position.e,\n'factor'  : {'speed'  : printer.gcode_move.speed_factor,\n'extrude': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE=\"{restore}\"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info(\"Timelapse: Warning, minimum extruder temperature not reached!\")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if \"xyz\" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info(\"Timelapse: Warning, axis not homed yet!\")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info(\"Timelapse: disabled, take frame ignored\")}{% endif %}\n{% endif %}"
      },
      "gcode_macro _TIMELAPSE_NEW_FRAME": {
        "description": "action call for timelapse shoot. must be a seperate macro",
        "gcode": "\n{action_call_remote_method(\"timelapse_newframe\",\nmacropark=printer['gcode_macro TIMELAPSE_TAKE_FRAME'].park,\nhyperlapse=params.HYPERLAPSE)}"
      },
      "delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME": {
        "gcode": "\n{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}\n{% set factor = {'speed': printer.gcode_move.speed_factor, 'extrude': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info(\"Timelapse: Warning minimum extruder temperature not reached!\")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}"
      },
      "gcode_macro HYPERLAPSE": {
        "description": "Start/Stop a hyperlapse recording",
        "variable_cycle": "0",
        "variable_run": "False",
        "gcode": "\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == 'start' %}\n{action_respond_info(\"Hyperlapse: frames started (Cycle %d sec)\" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == 'stop' %}\n{% if run %}{action_respond_info(\"Hyperlapse: frames stopped\")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error(\"Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP\")}\n{% endif %}"
      },
      "delayed_gcode _HYPERLAPSE_LOOP": {
        "gcode": "\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer[\"gcode_macro HYPERLAPSE\"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True"
      },
      "gcode_macro TIMELAPSE_RENDER": {
        "description": "Render Timelapse video and wait for the result",
        "variable_render": "False",
        "variable_run_identifier": "0",
        "gcode": "\n{action_respond_info(\"Timelapse: Rendering started\")}\n{action_call_remote_method(\"timelapse_render\", byrendermacro=\"True\")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings['gcode_macro pause'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5"
      },
      "delayed_gcode _WAIT_TIMELAPSE_RENDER": {
        "gcode": "\n{% set ri = printer['gcode_macro TIMELAPSE_RENDER'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer['gcode_macro TIMELAPSE_RENDER'].render %}\nM117 Rendering {['-','\\\\','|','/'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info(\"Timelapse: Rendering finished\")}\nM117\n{printer.configfile.settings['gcode_macro resume'].rename_existing}\n{% endif %}"
      },
      "gcode_macro TEST_STREAM_DELAY": {
        "description": "Helper macro to find stream and park delay",
        "gcode": "\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error(\"Toolhead z %.3f to low. Please place head above z = 5.0\" % act.z)}\n{% endif %}"
      },
      "neopixel sb_leds": {
        "pin": "PB0",
        "chain_count": "3",
        "color_order": "GRB",
        "initial_red": "0.0",
        "initial_green": "0.0",
        "initial_blue": "0.0",
        "initial_white": "0.0"
      },
      "gcode_macro _sb_vars": {
        "variable_colors": "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n'printing': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w': 1.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}",
        "variable_logo_led_name": "\"sb_leds\"",
        "variable_logo_idx": "\"1\"",
        "variable_nozzle_led_name": "\"sb_leds\"",
        "variable_nozzle_idx": "\"2,3\"",
        "variable_thermal_config": "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}",
        "gcode": ""
      },
      "gcode_macro _set_sb_leds": {
        "gcode": "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"
      },
      "gcode_macro _set_sb_leds_by_name": {
        "gcode": "\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer[\"gcode_macro _sb_vars\"].colors[leds_name][color_name] %}\n{% set led = printer[\"gcode_macro _sb_vars\"][leds_name + \"_led_name\"] %}\n{% set idx = printer[\"gcode_macro _sb_vars\"][leds_name + \"_idx\"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx=\"{idx}\" transmit={transmit}"
      },
      "gcode_macro _set_logo_leds": {
        "gcode": "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer[\"gcode_macro _sb_vars\"].logo_led_name %}\n{% set idx = printer[\"gcode_macro _sb_vars\"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx=\"{idx}\" transmit={transmit}"
      },
      "gcode_macro _set_nozzle_leds": {
        "gcode": "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer[\"gcode_macro _sb_vars\"].nozzle_led_name %}\n{% set idx = printer[\"gcode_macro _sb_vars\"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx=\"{idx}\" transmit={transmit}"
      },
      "gcode_macro set_logo_leds_off": {
        "gcode": "\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}"
      },
      "gcode_macro set_nozzle_leds_on": {
        "gcode": "\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds=\"nozzle\" color=\"on\" transmit={transmit}"
      },
      "gcode_macro set_nozzle_leds_off": {
        "gcode": "\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds=\"nozzle\" color=\"off\" transmit={transmit}"
      },
      "gcode_macro status_off": {
        "gcode": "\nset_logo_leds_off transmit=0\nset_nozzle_leds_off"
      },
      "gcode_macro status_ready": {
        "gcode": "\n_set_sb_leds_by_name leds=\"logo\" color=\"standby\" transmit=0\n_set_sb_leds_by_name leds=\"nozzle\" color=\"standby\" transmit=1"
      },
      "gcode_macro status_busy": {
        "gcode": "\n_set_sb_leds_by_name leds=\"logo\" color=\"busy\" transmit=0\nset_nozzle_leds_on"
      },
      "gcode_macro status_heating": {
        "gcode": "\n_set_sb_leds_by_name leds=\"logo\" color=\"heating\" transmit=0\n_set_sb_leds_by_name leds=\"nozzle\" color=\"heating\" transmit=1"
      },
      "gcode_macro status_leveling": {
        "gcode": "\n_set_sb_leds_by_name leds=\"logo\" color=\"leveling\" transmit=0\nset_nozzle_leds_on"
      },
      "gcode_macro status_homing": {
        "gcode": "\n_set_sb_leds_by_name leds=\"logo\" color=\"homing\" transmit=0\nset_nozzle_leds_on"
      },
      "gcode_macro status_cleaning": {
        "gcode": "\n_set_sb_leds_by_name leds=\"logo\" color=\"cleaning\" transmit=0\nset_nozzle_leds_on"
      },
      "gcode_macro status_meshing": {
        "gcode": "\n_set_sb_leds_by_name leds=\"logo\" color=\"meshing\" transmit=0\nset_nozzle_leds_on"
      },
      "gcode_macro status_calibrating_z": {
        "gcode": "\n_set_sb_leds_by_name leds=\"logo\" color=\"calibrating_z\" transmit=0\nset_nozzle_leds_on"
      },
      "gcode_macro status_printing": {
        "gcode": "\n_set_sb_leds_by_name leds=\"logo\" color=\"printing\" transmit=0\n_set_sb_leds_by_name leds=\"nozzle\" color=\"printing\" transmit=1"
      },
      "bed_mesh default": {
        "version": "1",
        "points": "\n-0.015000, -0.036250, -0.041250, -0.056250, -0.030000\n-0.028750, -0.041250, -0.041250, -0.066250, -0.028750\n-0.002500, -0.023750, 0.000000, -0.042500, -0.011250\n-0.018750, -0.028750, -0.032500, -0.058750, -0.017500\n-0.016250, -0.015000, -0.032500, -0.060000, -0.010000",
        "x_count": "5",
        "y_count": "5",
        "mesh_x_pps": "2",
        "mesh_y_pps": "2",
        "algo": "lagrange",
        "tension": "0.2",
        "min_x": "15.0",
        "max_x": "320.0",
        "min_y": "35.0",
        "max_y": "320.0"
      }
    },
    "settings": {
      "mcu": {
        "serial": "/dev/serial/by-id/usb-Klipper_stm32f446xx_25003C001750344D30353320-if00",
        "baud": 250000,
        "restart_method": "command",
        "max_stepper_error": 2.5e-05
      },
      "tmc2209 stepper_x": {
        "uart_pin": "PC4",
        "uart_address": 0,
        "run_current": 1,
        "hold_current": 2,
        "sense_resistor": 0.11,
        "interpolate": false,
        "stealthchop_threshold": 0,
        "driver_toff": 3,
        "driver_hstrt": 5,
        "driver_hend": 0,
        "driver_tbl": 2,
        "driver_iholddelay": 8,
        "driver_pwm_ofs": 36,
        "driver_pwm_grad": 14,
        "driver_pwm_freq": 1,
        "driver_pwm_autoscale": true,
        "driver_pwm_autograd": true,
        "driver_pwm_reg": 8,
        "driver_pwm_lim": 12,
        "driver_tpowerdown": 20,
        "driver_sgthrs": 0
      },
      "stepper_x": {
        "microsteps": 32,
        "step_pin": "PF13",
        "dir_pin": "PF12",
        "rotation_distance": 40,
        "full_steps_per_rotation": 200,
        "gear_ratio": [],
        "enable_pin": "!PF14",
        "endstop_pin": "PG6",
        "position_endstop": 350,
        "position_min": 0,
        "position_max": 350,
        "homing_speed": 90,
        "second_homing_speed": 45,
        "homing_retract_speed": 90,
        "homing_retract_dist": 5,
        "homing_positive_dir": true
      },
      "tmc2209 stepper_y": {
        "uart_pin": "PD11",
        "uart_address": 0,
        "run_current": 1,
        "hold_current": 2,
        "sense_resistor": 0.11,
        "interpolate": false,
        "stealthchop_threshold": 0,
        "driver_toff": 3,
        "driver_hstrt": 5,
        "driver_hend": 0,
        "driver_tbl": 2,
        "driver_iholddelay": 8,
        "driver_pwm_ofs": 36,
        "driver_pwm_grad": 14,
        "driver_pwm_freq": 1,
        "driver_pwm_autoscale": true,
        "driver_pwm_autograd": true,
        "driver_pwm_reg": 8,
        "driver_pwm_lim": 12,
        "driver_tpowerdown": 20,
        "driver_sgthrs": 0
      },
      "stepper_y": {
        "microsteps": 32,
        "step_pin": "PG0",
        "dir_pin": "PG1",
        "rotation_distance": 40,
        "full_steps_per_rotation": 200,
        "gear_ratio": [],
        "enable_pin": "!PF15",
        "endstop_pin": "PG9",
        "position_endstop": 350,
        "position_min": 0,
        "position_max": 350,
        "homing_speed": 90,
        "second_homing_speed": 45,
        "homing_retract_speed": 90,
        "homing_retract_dist": 5,
        "homing_positive_dir": true
      },
      "tmc2209 stepper_z": {
        "uart_pin": "PC6",
        "uart_address": 0,
        "run_current": 0.8,
        "hold_current": 2,
        "sense_resistor": 0.11,
        "interpolate": false,
        "stealthchop_threshold": 0,
        "driver_toff": 3,
        "driver_hstrt": 5,
        "driver_hend": 0,
        "driver_tbl": 2,
        "driver_iholddelay": 8,
        "driver_pwm_ofs": 36,
        "driver_pwm_grad": 14,
        "driver_pwm_freq": 1,
        "driver_pwm_autoscale": true,
        "driver_pwm_autograd": true,
        "driver_pwm_reg": 8,
        "driver_pwm_lim": 12,
        "driver_tpowerdown": 20,
        "driver_sgthrs": 0
      },
      "stepper_z": {
        "microsteps": 32,
        "step_pin": "PF11",
        "dir_pin": "PG3",
        "rotation_distance": 40,
        "full_steps_per_rotation": 200,
        "gear_ratio": [
          [
            80,
            16
          ]
        ],
        "enable_pin": "!PG5",
        "endstop_pin": "PG10",
        "position_endstop": 1.41,
        "position_min": -5,
        "position_max": 310,
        "homing_speed": 8,
        "second_homing_speed": 3,
        "homing_retract_speed": 8,
        "homing_retract_dist": 3,
        "homing_positive_dir": false
      },
      "tmc2209 stepper_z1": {
        "uart_pin": "PC7",
        "uart_address": 0,
        "run_current": 0.8,
        "hold_current": 2,
        "sense_resistor": 0.11,
        "interpolate": false,
        "stealthchop_threshold": 0,
        "driver_toff": 3,
        "driver_hstrt": 5,
        "driver_hend": 0,
        "driver_tbl": 2,
        "driver_iholddelay": 8,
        "driver_pwm_ofs": 36,
        "driver_pwm_grad": 14,
        "driver_pwm_freq": 1,
        "driver_pwm_autoscale": true,
        "driver_pwm_autograd": true,
        "driver_pwm_reg": 8,
        "driver_pwm_lim": 12,
        "driver_tpowerdown": 20,
        "driver_sgthrs": 0
      },
      "stepper_z1": {
        "microsteps": 32,
        "step_pin": "PG4",
        "dir_pin": "!PC1",
        "rotation_distance": 40,
        "full_steps_per_rotation": 200,
        "gear_ratio": [
          [
            80,
            16
          ]
        ],
        "enable_pin": "!PA0"
      },
      "tmc2209 stepper_z2": {
        "uart_pin": "PF2",
        "uart_address": 0,
        "run_current": 0.8,
        "hold_current": 2,
        "sense_resistor": 0.11,
        "interpolate": false,
        "stealthchop_threshold": 0,
        "driver_toff": 3,
        "driver_hstrt": 5,
        "driver_hend": 0,
        "driver_tbl": 2,
        "driver_iholddelay": 8,
        "driver_pwm_ofs": 36,
        "driver_pwm_grad": 14,
        "driver_pwm_freq": 1,
        "driver_pwm_autoscale": true,
        "driver_pwm_autograd": true,
        "driver_pwm_reg": 8,
        "driver_pwm_lim": 12,
        "driver_tpowerdown": 20,
        "driver_sgthrs": 0
      },
      "stepper_z2": {
        "microsteps": 32,
        "step_pin": "PF9",
        "dir_pin": "PF10",
        "rotation_distance": 40,
        "full_steps_per_rotation": 200,
        "gear_ratio": [
          [
            80,
            16
          ]
        ],
        "enable_pin": "!PG2"
      },
      "tmc2209 stepper_z3": {
        "uart_pin": "PE4",
        "uart_address": 0,
        "run_current": 0.8,
        "hold_current": 2,
        "sense_resistor": 0.11,
        "interpolate": false,
        "stealthchop_threshold": 0,
        "driver_toff": 3,
        "driver_hstrt": 5,
        "driver_hend": 0,
        "driver_tbl": 2,
        "driver_iholddelay": 8,
        "driver_pwm_ofs": 36,
        "driver_pwm_grad": 14,
        "driver_pwm_freq": 1,
        "driver_pwm_autoscale": true,
        "driver_pwm_autograd": true,
        "driver_pwm_reg": 8,
        "driver_pwm_lim": 12,
        "driver_tpowerdown": 20,
        "driver_sgthrs": 0
      },
      "stepper_z3": {
        "microsteps": 32,
        "step_pin": "PC13",
        "dir_pin": "!PF0",
        "rotation_distance": 40,
        "full_steps_per_rotation": 200,
        "gear_ratio": [
          [
            80,
            16
          ]
        ],
        "enable_pin": "!PF1"
      },
      "tmc2209 extruder": {
        "uart_pin": "PE1",
        "uart_address": 0,
        "run_current": 0.5,
        "hold_current": 2,
        "sense_resistor": 0.11,
        "interpolate": false,
        "stealthchop_threshold": 0,
        "driver_toff": 3,
        "driver_hstrt": 5,
        "driver_hend": 0,
        "driver_tbl": 2,
        "driver_iholddelay": 8,
        "driver_pwm_ofs": 36,
        "driver_pwm_grad": 14,
        "driver_pwm_freq": 1,
        "driver_pwm_autoscale": true,
        "driver_pwm_autograd": true,
        "driver_pwm_reg": 8,
        "driver_pwm_lim": 12,
        "driver_tpowerdown": 20,
        "driver_sgthrs": 0
      },
      "extruder": {
        "microsteps": 32,
        "sensor_type": "ATC Semitec 104NT-4-R025H42G",
        "pullup_resistor": 4700,
        "inline_resistor": 0,
        "sensor_pin": "PF4",
        "min_temp": 10,
        "max_temp": 300,
        "min_extrude_temp": 170,
        "max_power": 1,
        "smooth_time": 1,
        "control": "pid",
        "pid_kp": 16.476,
        "pid_ki": 1.132,
        "pid_kd": 59.93,
        "heater_pin": "PA2",
        "pwm_cycle_time": 0.1,
        "nozzle_diameter": 0.4,
        "filament_diameter": 1.75,
        "max_extrude_cross_section": 0.7,
        "max_extrude_only_velocity": 159.64864822148658,
        "max_extrude_only_accel": 1596.4864822148659,
        "max_extrude_only_distance": 50,
        "instantaneous_corner_velocity": 1,
        "step_pin": "PE2",
        "pressure_advance": 0.025,
        "pressure_advance_smooth_time": 0.04,
        "dir_pin": "PE3",
        "rotation_distance": 22.225372078,
        "full_steps_per_rotation": 200,
        "gear_ratio": [
          [
            50,
            10
          ]
        ],
        "enable_pin": "!PD4"
      },
      "heater_bed": {
        "sensor_type": "Generic 3950",
        "pullup_resistor": 4700,
        "inline_resistor": 0,
        "sensor_pin": "PF3",
        "min_temp": 0,
        "max_temp": 120,
        "min_extrude_temp": 170,
        "max_power": 0.6,
        "smooth_time": 1,
        "control": "pid",
        "pid_kp": 38.625,
        "pid_ki": 1.551,
        "pid_kd": 240.443,
        "heater_pin": "PA3",
        "pwm_cycle_time": 0.1
      },
      "verify_heater heater_bed": {
        "hysteresis": 5,
        "max_error": 120,
        "heating_gain": 2,
        "check_gain_time": 60
      },
      "probe": {
        "z_offset": 0,
        "deactivate_on_each_sample": true,
        "activate_gcode": "",
        "deactivate_gcode": "",
        "pin": "PG15",
        "speed": 10,
        "lift_speed": 10,
        "x_offset": 0,
        "y_offset": 25,
        "samples": 3,
        "sample_retract_dist": 3,
        "samples_result": "median",
        "samples_tolerance": 0.006,
        "samples_tolerance_retries": 3
      },
      "fan": {
        "max_power": 1,
        "kick_start_time": 0.5,
        "off_below": 0.1,
        "cycle_time": 0.01,
        "hardware_pwm": false,
        "shutdown_speed": 0,
        "pin": "PE5"
      },
      "heater_fan hotend_fan": {
        "heater": [
          "extruder"
        ],
        "heater_temp": 50,
        "max_power": 1,
        "kick_start_time": 0.5,
        "off_below": 0,
        "cycle_time": 0.01,
        "hardware_pwm": false,
        "shutdown_speed": 1,
        "pin": "PA8",
        "fan_speed": 1
      },
      "controller_fan controller_fan": {
        "max_power": 1,
        "kick_start_time": 0.5,
        "off_below": 0,
        "cycle_time": 0.01,
        "hardware_pwm": false,
        "shutdown_speed": 0,
        "pin": "PD12",
        "fan_speed": 1,
        "idle_speed": 0,
        "idle_timeout": 30,
        "heater": [
          "heater_bed"
        ]
      },
      "temperature_fan exhaust_fan": {
        "max_power": 1,
        "kick_start_time": 0.5,
        "off_below": 0.21,
        "cycle_time": 0.01,
        "hardware_pwm": false,
        "shutdown_speed": 0,
        "pin": "PD14",
        "min_temp": 0,
        "max_temp": 55,
        "sensor_type": "Generic 3950",
        "pullup_resistor": 4700,
        "inline_resistor": 0,
        "sensor_pin": "PF5",
        "max_speed": 1,
        "min_speed": 0.2,
        "target_temp": 35,
        "control": "pid",
        "pid_kp": 2,
        "pid_ki": 5,
        "pid_kd": 0.5,
        "pid_deriv_time": 2
      },
      "temperature_fan pi_temp": {
        "max_power": 1,
        "kick_start_time": 0.5,
        "off_below": 0.21,
        "cycle_time": 0.01,
        "hardware_pwm": false,
        "shutdown_speed": 0,
        "pin": "PD13",
        "min_temp": 10,
        "max_temp": 80,
        "sensor_type": "temperature_host",
        "sensor_path": "/sys/class/thermal/thermal_zone0/temp",
        "max_speed": 1,
        "min_speed": 0.2,
        "target_temp": 55,
        "control": "watermark",
        "max_delta": 2
      },
      "filament_switch_sensor runout_sensor": {
        "switch_pin": "!PG11",
        "pause_on_runout": true,
        "runout_gcode": "",
        "pause_delay": 0.5,
        "event_delay": 3
      },
      "pause_resume": {
        "recover_velocity": 50
      },
      "led case_light": {
        "cycle_time": 0.01,
        "hardware_pwm": false,
        "white_pin": "PD15",
        "initial_red": 0,
        "initial_green": 0,
        "initial_blue": 0,
        "initial_white": 0.5
      },
      "idle_timeout": {
        "timeout": 1800,
        "gcode": "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"
      },
      "safe_z_home": {
        "home_xy_position": [
          232,
          347
        ],
        "z_hop": 10,
        "z_hop_speed": 15,
        "speed": 150,
        "move_to_previous": false
      },
      "quad_gantry_level": {
        "retries": 5,
        "retry_tolerance": 0.0075,
        "max_adjust": 10,
        "horizontal_move_z": 5,
        "points": [
          [
            50,
            25
          ],
          [
            50,
            275
          ],
          [
            300,
            275
          ],
          [
            300,
            25
          ]
        ],
        "speed": 400,
        "gantry_corners": [
          [
            -60,
            -10
          ],
          [
            410,
            420
          ]
        ]
      },
      "board_pins": {
        "mcu": [
          "mcu"
        ],
        "aliases": [
          [
            "EXP1_1",
            "PE8"
          ],
          [
            "EXP1_2",
            "PE7"
          ],
          [
            "EXP1_3",
            "PE9"
          ],
          [
            "EXP1_4",
            "PE10"
          ],
          [
            "EXP1_5",
            "PE12"
          ],
          [
            "EXP1_6",
            "PE13"
          ],
          [
            "EXP1_7",
            "PE14"
          ],
          [
            "EXP1_8",
            "PE15"
          ],
          [
            "EXP1_9",
            "<GND>"
          ],
          [
            "EXP1_10",
            "<5V>"
          ],
          [
            "EXP2_1",
            "PA6"
          ],
          [
            "EXP2_2",
            "PA5"
          ],
          [
            "EXP2_3",
            "PB1"
          ],
          [
            "EXP2_4",
            "PA4"
          ],
          [
            "EXP2_5",
            "PB2"
          ],
          [
            "EXP2_6",
            "PA7"
          ],
          [
            "EXP2_7",
            "PC15"
          ],
          [
            "EXP2_8",
            "<RST>"
          ],
          [
            "EXP2_9",
            "<GND>"
          ],
          [
            "EXP2_10",
            "<5V>"
          ]
        ]
      },
      "display": {
        "lcd_type": "uc1701",
        "cs_pin": "EXP1_3",
        "spi_speed": 10000000,
        "spi_software_sclk_pin": "EXP2_2",
        "spi_software_miso_pin": "EXP2_1",
        "spi_software_mosi_pin": "EXP2_6",
        "a0_pin": "EXP1_4",
        "contrast": 63,
        "rst_pin": "EXP1_5",
        "menu_root": "__main",
        "menu_timeout": 0,
        "menu_reverse_navigation": true,
        "encoder_pins": "^EXP2_5, ^EXP2_3",
        "encoder_steps_per_detent": 4,
        "encoder_fast_rate": 0.03,
        "click_pin": "^!EXP1_2",
        "display_group": "_default_16x4"
      },
      "menu __main __octoprint": {
        "type": "disabled",
        "name": "",
        "enable": true
      },
      "menu __main __control __caselight": {
        "type": "input",
        "name": "Light: {'%3d' % (menu.input*100)}%",
        "enable": "{'led case_light' in printer}",
        "gcode": "\nSET_LED LED=case_light WHITE={menu.input} SYNC=0 TRANSMIT=1",
        "realtime": false,
        "input": "{printer['led case_light'].color_data[0][3]}",
        "input_min": "0",
        "input_max": "1",
        "input_step": 0.01
      },
      "menu __main __control __lcdlight": {
        "type": "input",
        "name": "LCD: {'%3d' % (menu.input*100)}%",
        "enable": "{'neopixel btt_mini12864' in printer}",
        "gcode": "\nSET_LED LED=\"btt_mini12864\" RED=0 GREEN={menu.input} BLUE=0 SYNC=0 TRANSMIT=1",
        "realtime": false,
        "input": "{printer['neopixel btt_mini12864'].color_data[0][1]}",
        "input_min": "0",
        "input_max": "1",
        "input_step": 0.01
      },
      "neopixel btt_mini12864": {
        "pin": "EXP1_6",
        "chain_count": 3,
        "color_order": [
          "RGB"
        ],
        "initial_red": 0.1,
        "initial_green": 0.5,
        "initial_blue": 0,
        "initial_white": 0
      },
      "bed_mesh": {
        "relative_reference_index": 12,
        "probe_count": [
          5,
          5
        ],
        "mesh_min": [
          15,
          35
        ],
        "mesh_max": [
          320,
          320
        ],
        "mesh_pps": [
          2,
          2
        ],
        "algorithm": "lagrange",
        "bicubic_tension": 0.2,
        "horizontal_move_z": 5,
        "speed": 250,
        "fade_start": 1,
        "fade_end": 0,
        "split_delta_z": 0.025,
        "move_check_distance": 5
      },
      "bed_mesh default": {
        "version": 1,
        "points": [
          [
            -0.015,
            -0.03625,
            -0.04125,
            -0.05625,
            -0.03
          ],
          [
            -0.02875,
            -0.04125,
            -0.04125,
            -0.06625,
            -0.02875
          ],
          [
            -0.0025,
            -0.02375,
            0,
            -0.0425,
            -0.01125
          ],
          [
            -0.01875,
            -0.02875,
            -0.0325,
            -0.05875,
            -0.0175
          ],
          [
            -0.01625,
            -0.015,
            -0.0325,
            -0.06,
            -0.01
          ]
        ],
        "min_x": 15,
        "max_x": 320,
        "min_y": 35,
        "max_y": 320,
        "x_count": 5,
        "y_count": 5,
        "mesh_x_pps": 2,
        "mesh_y_pps": 2,
        "algo": "lagrange",
        "tension": 0.2
      },
      "adxl345": {
        "axes_map": [
          "x",
          "y",
          "z"
        ],
        "rate": 3200,
        "cs_pin": "PA15",
        "spi_speed": 5000000,
        "spi_bus": "spi3"
      },
      "resonance_tester": {
        "move_speed": 50,
        "min_freq": 5,
        "max_freq": 133.33333333333334,
        "accel_per_hz": 75,
        "hz_per_sec": 1,
        "probe_points": [
          [
            175,
            175,
            170
          ]
        ],
        "accel_chip": "adxl345"
      },
      "input_shaper": {
        "shaper_type": "mzv",
        "shaper_type_x": "mzv",
        "damping_ratio_x": 0.1,
        "shaper_freq_x": 49.8,
        "shaper_type_y": "mzv",
        "damping_ratio_y": 0.1,
        "shaper_freq_y": 32.2
      },
      "gcode_macro print_start_check": {
        "gcode": "\n{% if not printer[\"filament_switch_sensor runout_sensor\"].filament_detected %}\nM117 No filament, aborting\n\nPRINT_END\nM112\n{% endif %}",
        "description": "G-Code macro"
      },
      "gcode_macro park": {
        "gcode": "\n{% set th = printer.toolhead %}\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30",
        "description": "G-Code macro"
      },
      "gcode_macro g32": {
        "gcode": "\nSAVE_GCODE_STATE NAME=STATE_G32\nSTATUS_HOMING\nG90\nG28\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL\nSTATUS_HOMING\nG28\nSTATUS_LEVELING\nBED_MESH_CALIBRATE\nSTATUS_HOMING\nG28\nSTATUS_BUSY\n\nRESTORE_GCODE_STATE NAME=STATE_G32",
        "description": "G-Code macro"
      },
      "gcode_macro print_start": {
        "gcode": "\nPRINT_START_CHECK\nSET_LED LED=\"btt_mini12864\" RED=0.2235 GREEN=1 BLUE=0 SYNC=0 TRANSMIT=1\nSET_LED LED=case_light WHITE=1.00 SYNC=0 TRANSMIT=1\nG32\nSET_GCODE_OFFSET Z=-0.210\nSAVE_GCODE_STATE NAME=PRIME_NOZZLE_STATE\nSTATUS_BUSY\nM117 Priming\nG90\nM83\nG92 E0\nG1 Z10 F900\nG1 Y3 X3 F18000\nG1 Z0.2 F900\nG91\nG1 X100 E25 F1000\nG1 Y-2 F1000\nG1 X-60 E9 F1000\nG1 E-0.5 F3000\nG1 X0.5 E0 F1000\nG1 X-5.5 E0 F1000\nRESTORE_GCODE_STATE NAME=PRIME_NOZZLE_STATE\nG90\nG1 Z2 F3000\nM117 Printing\nSTATUS_PRINTING",
        "description": "G-Code macro"
      },
      "gcode_macro g28": {
        "gcode": "\nSTATUS_HOMING\n{% if rawparams %}\nG28.1 {rawparams}\n{% else %}\nG28.1\n{% endif %}\nSTATUS_OFF",
        "rename_existing": "G28.1",
        "description": "G-Code macro"
      },
      "gcode_macro print_end": {
        "gcode": "\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nSTATUS_OFF\nSET_LED LED=\"btt_mini12864\" RED=0 GREEN=0.2 BLUE=0 SYNC=0 TRANSMIT=1\nSET_LED LED=case_light WHITE=0 SYNC=0 TRANSMIT=1\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END",
        "description": "G-Code macro"
      },
      "gcode_macro test_speed": {
        "gcode": "\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info(\"TEST_SPEED: starting %d iterations at speed %d, accel %d\" % (iterations, speed, accel)) }\n\n\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED",
        "description": "G-Code macro"
      },
      "virtual_sdcard": {
        "path": "~/printer_data/gcodes",
        "on_error_gcode": "CANCEL_PRINT"
      },
      "gcode_macro cancel_print": {
        "gcode": "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set allow_park = False if not macro_found\nelse False if client.park_at_cancel is not defined\nelse True  if client.park_at_cancel|lower == 'true'\nelse False %}\n{% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = \"\"                                    if not macro_found\nelse \"\"                                    if client.park_at_cancel_x is not defined\nelse \"X=\" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}\n{% set park_y = \"\"                                    if not macro_found\nelse \"\"                                    if client.park_at_cancel_y is not defined\nelse \"Y=\" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}\n{% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}\n\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE",
        "rename_existing": "CANCEL_PRINT_BASE",
        "description": "Cancel the actual running print"
      },
      "gcode_macro pause": {
        "gcode": "\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE=\"{printer[printer.toolhead.extruder].target}\"\n\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}",
        "rename_existing": "PAUSE_BASE",
        "description": "Pause the actual running print"
      },
      "gcode_macro resume": {
        "gcode": "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}\n\nM109 S{last_extruder_temp}\n\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}",
        "rename_existing": "RESUME_BASE",
        "description": "Resume the actual running print",
        "variable_last_extruder_temp": "0"
      },
      "gcode_macro set_pause_next_layer": {
        "gcode": "\n{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE=\"{{ 'enable': ENABLE, 'call': MACRO }}\"",
        "description": "Enable a pause if the next layer is reached"
      },
      "gcode_macro set_pause_at_layer": {
        "gcode": "\n{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE=\"{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}\"",
        "description": "Enable/disable a pause if a given layer number is reached"
      },
      "gcode_macro set_print_stats_info": {
        "gcode": "\n{% if pause_next_layer.enable %}\n{action_respond_info(\"%s, forced by pause_next_layer\" % pause_next_layer.call)}\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n{action_respond_info(\"%s, forced by pause_at_layer [%d]\" % (pause_at_layer.call, pause_at_layer.layer))}\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}",
        "rename_existing": "SET_PRINT_STATS_INFO_BASE",
        "description": "Overwrite, to get pause_next_layer and pause_at_layer feature",
        "variable_pause_next_layer": "{ 'enable': False, 'call': \"PAUSE\" }",
        "variable_pause_at_layer": "{ 'enable': False, 'layer': 0, 'call': \"PAUSE\" }"
      },
      "gcode_macro _toolhead_park_pause_cancel": {
        "gcode": "\n\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = False if not macro_found\nelse False if client.use_custom_pos is not defined\nelse True  if client.use_custom_pos|lower == 'true'\nelse False %}\n{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}\n{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}\n{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if \"xyz\" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\n{action_respond_info(\"Printer not homed\")}\n{% endif %}",
        "description": "Helper: park toolhead used in PAUSE and CANCEL_PRINT"
      },
      "gcode_macro _client_extrude": {
        "gcode": "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n{% set use_fw_retract = False if not macro_found\nelse False if client.use_fw_retract is not defined\nelse True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined\nelse False %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.unretract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_unretract|default(35) %}\n\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.extruder.can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\n{action_respond_info(\"Extruder not hot enough\")}\n{% endif %}",
        "description": "Extrudes, if the extruder is hot enough"
      },
      "gcode_macro _client_retract": {
        "gcode": "\n{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}\n\n{% set length = (params.LENGTH|float) if params.LENGTH is defined\nelse 1.0 if not macro_found\nelse client.retract|default(1.0) %}\n\n{% set speed = params.SPEED if params.SPEED is defined\nelse 35 if not macro_found\nelse client.speed_retract|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}",
        "description": "Retracts, if the extruder is hot enough"
      },
      "gcode_macro get_timelapse_setup": {
        "gcode": "\n{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}\n{% set output_txt = [\"Timelapse Setup:\"] %}\n{% set _dummy = output_txt.append(\"enable: %s\" % tl.enable) %}\n{% set _dummy = output_txt.append(\"park: %s\" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append(\"park position: %s time: %s s\" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append(\"park cord x:%s y:%s dz:%s\" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append(\"travel speed: %s mm/s\" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append(\"fw_retract: %s\" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append(\"retract: %s mm speed: %s mm/s\" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append(\"extrude: %s mm speed: %s mm/s\" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append(\"verbose: %s\" % tl.verbose) %}\n{action_respond_info(output_txt|join(\"\\n\"))}",
        "description": "Print the Timelapse setup"
      },
      "gcode_macro _set_timelapse_setup": {
        "gcode": "\n{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']\nelse False %}\n{% set park = {'min'   : {'x': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n'y': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n'max'   : {'x': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n'y': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n'center': {'x': (max.x-(max.x-min.x)/2)|round(3),\n'y': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in ['true', 'false'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == 'true' else False}\n{% else %}\n{action_raise_error(\"ENABLE=%s not supported. Allowed values are [True, False]\" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in ['true', 'false'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == 'true' else False}\n{% else %}\n{action_raise_error(\"VERBOSE=%s not supported. Allowed values are [True, False]\" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({'x':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"CUSTOM_POS_X=%s must be within [%s - %s]\" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({'y':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"CUSTOM_POS_Y=%s must be within [%s - %s]\" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({'dz':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"CUSTOM_POS_DZ=%s must be within [%s - %s]\" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in ['true', 'false'] %}\n{% set _dummy = tl.park.update({'enable':True if params.PARK_ENABLE|lower == 'true' else False}) %}\n{% else %}\n{action_raise_error(\"PARK_ENABLE=%s not supported. Allowed values are [True, False]\" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in ['center','front_left','front_right','back_left','back_right','custom','x_only','y_only'] %}\n{% set dic = {'center'      : {'x': park.center.x   , 'y': park.center.y   , 'dz': 1                },\n'front_left'  : {'x': park.min.x      , 'y': park.min.y      , 'dz': 0                },\n'front_right' : {'x': park.max.x      , 'y': park.min.y      , 'dz': 0                },\n'back_left'   : {'x': park.min.x      , 'y': park.max.y      , 'dz': 0                },\n'back_right'  : {'x': park.max.x      , 'y': park.max.y      , 'dz': 0                },\n'custom'      : {'x': tl.park.custom.x, 'y': tl.park.custom.y, 'dz': tl.park.custom.dz},\n'x_only'      : {'x': tl.park.custom.x, 'y': 'none'          , 'dz': tl.park.custom.dz},\n'y_only'      : {'x': 'none'          , 'y': tl.park.custom.y, 'dz': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({'pos':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({'coord':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error(\"PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]\"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({'time':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"PARK_TIME=%s must be a positive number\" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE=\"{tl.park}\"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({'travel':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"TRAVEL_SPEED=%s must be larger than 0\" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({'retract':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"RETRACT_SPEED=%s must be larger than 0\" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({'extrude':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"EXTRUDE_SPEED=%s must be larger than 0\" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE=\"{tl.speed}\"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({'extrude':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"EXTRUDE_DISTANCE=%s must be specified as positiv number\" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({'retract':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error(\"RETRACT_DISTANCE=%s must be specified as positiv number\" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in ['true', 'false'] %}\n{% if 'firmware_retraction' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({'fw_retract': True if params.FW_RETRACT|lower == 'true' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({'fw_retract':False}) %}\n{% if params.FW_RETRACT|capitalize == 'True' %}\n{action_raise_error(\"[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract\")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error(\"FW_RETRACT=%s not supported. Allowed values are [True, False]\" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE=\"{tl.extruder}\"\n{% if printer.configfile.settings['gcode_macro pause'] is defined %}\n{% set _dummy = tl.macro.update({'pause': printer.configfile.settings['gcode_macro pause'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings['gcode_macro resume'] is defined %}\n{% set _dummy = tl.macro.update({'resume': printer.configfile.settings['gcode_macro resume'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE=\"{tl.macro}\"",
        "description": "Set user parameters for timelapse"
      },
      "gcode_macro timelapse_take_frame": {
        "gcode": "\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}\n{% if enable %}\n{% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or\n(not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}\n{% if park.enable %}\n{% set pos = {'x': 'X' + park.coord.x|string if park.pos != 'y_only' else '',\n'y': 'Y' + park.coord.y|string if park.pos != 'x_only' else '',\n'z': 'Z'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,\n'extrude'    : printer.gcode_move.absolute_extrude},\n'speed'   : printer.gcode_move.speed,\n'e'       : printer.gcode_move.gcode_position.e,\n'factor'  : {'speed'  : printer.gcode_move.speed_factor,\n'extrude': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE=\"{restore}\"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info(\"Timelapse: Warning, minimum extruder temperature not reached!\")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if \"xyz\" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info(\"Timelapse: Warning, axis not homed yet!\")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info(\"Timelapse: disabled, take frame ignored\")}{% endif %}\n{% endif %}",
        "description": "Take Timelapse shoot",
        "variable_enable": "False",
        "variable_takingframe": "False",
        "variable_park": "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}",
        "variable_extruder": "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}",
        "variable_speed": "{'travel': 100,\n'retract': 15,\n'extrude': 15}",
        "variable_verbose": "True",
        "variable_restore": "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}",
        "variable_macro": "{'pause': 'PAUSE', 'resume': 'RESUME'}",
        "variable_is_paused": "False"
      },
      "gcode_macro _timelapse_new_frame": {
        "gcode": "\n{action_call_remote_method(\"timelapse_newframe\",\nmacropark=printer['gcode_macro TIMELAPSE_TAKE_FRAME'].park,\nhyperlapse=params.HYPERLAPSE)}",
        "description": "action call for timelapse shoot. must be a seperate macro"
      },
      "delayed_gcode _wait_timelapse_take_frame": {
        "gcode": "\n{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}\n{% set factor = {'speed': printer.gcode_move.speed_factor, 'extrude': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info(\"Timelapse: Warning minimum extruder temperature not reached!\")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}",
        "initial_duration": 0
      },
      "gcode_macro hyperlapse": {
        "gcode": "\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == 'start' %}\n{action_respond_info(\"Hyperlapse: frames started (Cycle %d sec)\" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == 'stop' %}\n{% if run %}{action_respond_info(\"Hyperlapse: frames stopped\")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error(\"Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP\")}\n{% endif %}",
        "description": "Start/Stop a hyperlapse recording",
        "variable_cycle": "0",
        "variable_run": "False"
      },
      "delayed_gcode _hyperlapse_loop": {
        "gcode": "\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer[\"gcode_macro HYPERLAPSE\"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True",
        "initial_duration": 0
      },
      "gcode_macro timelapse_render": {
        "gcode": "\n{action_respond_info(\"Timelapse: Rendering started\")}\n{action_call_remote_method(\"timelapse_render\", byrendermacro=\"True\")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings['gcode_macro pause'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5",
        "description": "Render Timelapse video and wait for the result",
        "variable_render": "False",
        "variable_run_identifier": "0"
      },
      "delayed_gcode _wait_timelapse_render": {
        "gcode": "\n{% set ri = printer['gcode_macro TIMELAPSE_RENDER'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer['gcode_macro TIMELAPSE_RENDER'].render %}\nM117 Rendering {['-','\\\\','|','/'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info(\"Timelapse: Rendering finished\")}\nM117\n{printer.configfile.settings['gcode_macro resume'].rename_existing}\n{% endif %}",
        "initial_duration": 0
      },
      "gcode_macro test_stream_delay": {
        "gcode": "\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error(\"Toolhead z %.3f to low. Please place head above z = 5.0\" % act.z)}\n{% endif %}",
        "description": "Helper macro to find stream and park delay"
      },
      "neopixel sb_leds": {
        "pin": "PB0",
        "chain_count": 3,
        "color_order": [
          "GRB"
        ],
        "initial_red": 0,
        "initial_green": 0,
        "initial_blue": 0,
        "initial_white": 0
      },
      "gcode_macro _sb_vars": {
        "gcode": "",
        "description": "G-Code macro",
        "variable_colors": "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n'printing': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w': 1.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}",
        "variable_logo_led_name": "\"sb_leds\"",
        "variable_logo_idx": "\"1\"",
        "variable_nozzle_led_name": "\"sb_leds\"",
        "variable_nozzle_idx": "\"2,3\"",
        "variable_thermal_config": "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}"
      },
      "gcode_macro _set_sb_leds": {
        "gcode": "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}",
        "description": "G-Code macro"
      },
      "gcode_macro _set_sb_leds_by_name": {
        "gcode": "\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer[\"gcode_macro _sb_vars\"].colors[leds_name][color_name] %}\n{% set led = printer[\"gcode_macro _sb_vars\"][leds_name + \"_led_name\"] %}\n{% set idx = printer[\"gcode_macro _sb_vars\"][leds_name + \"_idx\"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx=\"{idx}\" transmit={transmit}",
        "description": "G-Code macro"
      },
      "gcode_macro _set_logo_leds": {
        "gcode": "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer[\"gcode_macro _sb_vars\"].logo_led_name %}\n{% set idx = printer[\"gcode_macro _sb_vars\"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx=\"{idx}\" transmit={transmit}",
        "description": "G-Code macro"
      },
      "gcode_macro _set_nozzle_leds": {
        "gcode": "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer[\"gcode_macro _sb_vars\"].nozzle_led_name %}\n{% set idx = printer[\"gcode_macro _sb_vars\"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx=\"{idx}\" transmit={transmit}",
        "description": "G-Code macro"
      },
      "gcode_macro set_logo_leds_off": {
        "gcode": "\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}",
        "description": "G-Code macro"
      },
      "gcode_macro set_nozzle_leds_on": {
        "gcode": "\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds=\"nozzle\" color=\"on\" transmit={transmit}",
        "description": "G-Code macro"
      },
      "gcode_macro set_nozzle_leds_off": {
        "gcode": "\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds=\"nozzle\" color=\"off\" transmit={transmit}",
        "description": "G-Code macro"
      },
      "gcode_macro status_off": {
        "gcode": "\nset_logo_leds_off transmit=0\nset_nozzle_leds_off",
        "description": "G-Code macro"
      },
      "gcode_macro status_ready": {
        "gcode": "\n_set_sb_leds_by_name leds=\"logo\" color=\"standby\" transmit=0\n_set_sb_leds_by_name leds=\"nozzle\" color=\"standby\" transmit=1",
        "description": "G-Code macro"
      },
      "gcode_macro status_busy": {
        "gcode": "\n_set_sb_leds_by_name leds=\"logo\" color=\"busy\" transmit=0\nset_nozzle_leds_on",
        "description": "G-Code macro"
      },
      "gcode_macro status_heating": {
        "gcode": "\n_set_sb_leds_by_name leds=\"logo\" color=\"heating\" transmit=0\n_set_sb_leds_by_name leds=\"nozzle\" color=\"heating\" transmit=1",
        "description": "G-Code macro"
      },
      "gcode_macro status_leveling": {
        "gcode": "\n_set_sb_leds_by_name leds=\"logo\" color=\"leveling\" transmit=0\nset_nozzle_leds_on",
        "description": "G-Code macro"
      },
      "gcode_macro status_homing": {
        "gcode": "\n_set_sb_leds_by_name leds=\"logo\" color=\"homing\" transmit=0\nset_nozzle_leds_on",
        "description": "G-Code macro"
      },
      "gcode_macro status_cleaning": {
        "gcode": "\n_set_sb_leds_by_name leds=\"logo\" color=\"cleaning\" transmit=0\nset_nozzle_leds_on",
        "description": "G-Code macro"
      },
      "gcode_macro status_meshing": {
        "gcode": "\n_set_sb_leds_by_name leds=\"logo\" color=\"meshing\" transmit=0\nset_nozzle_leds_on",
        "description": "G-Code macro"
      },
      "gcode_macro status_calibrating_z": {
        "gcode": "\n_set_sb_leds_by_name leds=\"logo\" color=\"calibrating_z\" transmit=0\nset_nozzle_leds_on",
        "description": "G-Code macro"
      },
      "gcode_macro status_printing": {
        "gcode": "\n_set_sb_leds_by_name leds=\"logo\" color=\"printing\" transmit=0\n_set_sb_leds_by_name leds=\"nozzle\" color=\"printing\" transmit=1",
        "description": "G-Code macro"
      },
      "printer": {
        "max_velocity": 600,
        "max_accel": 6000,
        "max_accel_to_decel": 3000,
        "square_corner_velocity": 5,
        "buffer_time_low": 1,
        "buffer_time_high": 2,
        "buffer_time_start": 0.25,
        "move_flush_time": 0.05,
        "kinematics": "corexy",
        "max_z_velocity": 30,
        "max_z_accel": 350
      },
      "force_move": {
        "enable_force_move": false
      },
      "verify_heater extruder": {
        "hysteresis": 5,
        "max_error": 120,
        "heating_gain": 2,
        "check_gain_time": 20
      }
    },
    "warnings": [],
    "save_config_pending": true,
    "save_config_pending_items": {
      "bed_mesh default": {
        "version": "1",
        "points": "\n  -0.021250, -0.035000, -0.038750, -0.040000, -0.030000\n  -0.016250, -0.041250, -0.040000, -0.047500, -0.031250\n  0.015000, -0.002500, 0.000000, -0.006250, 0.018750\n  0.022500, 0.010000, 0.006250, -0.008750, 0.017500\n  0.021250, 0.018750, 0.012500, -0.005000, 0.037500",
        "x_count": "5",
        "y_count": "5",
        "mesh_x_pps": "2",
        "mesh_y_pps": "2",
        "algo": "lagrange",
        "tension": "0.2",
        "min_x": "15.0",
        "max_x": "320.0",
        "min_y": "35.0",
        "max_y": "320.0"
      }
    }
  },
  "mcu": {
    "mcu_version": "v0.11.0-148-g52f4e20c",
    "mcu_build_versions": "gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2",
    "mcu_constants": {
      "ADC_MAX": 4095,
      "BUS_PINS_i2c1": "PB6,PB7",
      "BUS_PINS_i2c1a": "PB8,PB9",
      "BUS_PINS_i2c2": "PB10,PB11",
      "BUS_PINS_i2c3": "PA8,PC9",
      "BUS_PINS_sdio": "PC12,PD2,PC8,PC9,PC10,PC11",
      "BUS_PINS_spi1": "PA6,PA7,PA5",
      "BUS_PINS_spi1a": "PB4,PB5,PB3",
      "BUS_PINS_spi2": "PB14,PB15,PB13",
      "BUS_PINS_spi2a": "PC2,PC3,PB10",
      "BUS_PINS_spi3": "PB4,PB5,PB3",
      "BUS_PINS_spi3a": "PC11,PC12,PC10",
      "BUS_PINS_spi4": "PE13,PE14,PE12",
      "CLOCK_FREQ": 180000000,
      "MCU": "stm32f446xx",
      "PWM_MAX": 255,
      "RESERVE_PINS_USB": "PA11,PA12",
      "RESERVE_PINS_crystal": "PH0,PH1",
      "STATS_SUMSQ_BASE": 256,
      "STEPPER_BOTH_EDGE": 1
    },
    "last_stats": {
      "mcu_awake": 0.001,
      "mcu_task_avg": 5e-06,
      "mcu_task_stddev": 4e-06,
      "bytes_write": 11476829,
      "bytes_read": 20197782,
      "bytes_retransmit": 9,
      "bytes_invalid": 0,
      "send_seq": 329870,
      "receive_seq": 329870,
      "retransmit_seq": 2,
      "srtt": 0,
      "rttvar": 0,
      "rto": 0.025,
      "ready_bytes": 0,
      "upcoming_bytes": 0,
      "freq": 180000500
    }
  },
  "stepper_enable": {
    "steppers": {
      "stepper_x": false,
      "stepper_y": false,
      "stepper_z": false,
      "stepper_z1": false,
      "stepper_z2": false,
      "stepper_z3": false,
      "extruder": false
    }
  },
  "tmc2209 stepper_x": {
    "mcu_phase_offset": 63,
    "phase_offset_position": 523.3499999999999,
    "run_current": 0.979070927796758,
    "hold_current": 0.979070927796758,
    "drv_status": null,
    "temperature": null
  },
  "tmc2209 stepper_y": {
    "mcu_phase_offset": 35,
    "phase_offset_position": -172.775,
    "run_current": 0.979070927796758,
    "hold_current": 0.979070927796758,
    "drv_status": null,
    "temperature": null
  },
  "tmc2209 stepper_z": {
    "mcu_phase_offset": 13,
    "phase_offset_position": 53.4375,
    "run_current": 0.7954951288348658,
    "hold_current": 0.7954951288348658,
    "drv_status": null,
    "temperature": null
  },
  "tmc2209 stepper_z1": {
    "mcu_phase_offset": 119,
    "phase_offset_position": 48.245,
    "run_current": 0.7954951288348658,
    "hold_current": 0.7954951288348658,
    "drv_status": null,
    "temperature": null
  },
  "tmc2209 stepper_z2": {
    "mcu_phase_offset": 91,
    "phase_offset_position": 47.410000000000004,
    "run_current": 0.7954951288348658,
    "hold_current": 0.7954951288348658,
    "drv_status": null,
    "temperature": null
  },
  "tmc2209 stepper_z3": {
    "mcu_phase_offset": 73,
    "phase_offset_position": 53.47125,
    "run_current": 0.7954951288348658,
    "hold_current": 0.7954951288348658,
    "drv_status": null,
    "temperature": null
  },
  "tmc2209 extruder": {
    "mcu_phase_offset": 53,
    "phase_offset_position": 0.036810772504187496,
    "run_current": 0.489535463898379,
    "hold_current": 0.489535463898379,
    "drv_status": null,
    "temperature": null
  },
  "heaters": {
    "available_heaters": [
      "heater_bed",
      "extruder"
    ],
    "available_sensors": [
      "heater_bed",
      "temperature_fan exhaust_fan",
      "temperature_fan pi_temp",
      "extruder"
    ]
  },
  "heater_bed": {
    "temperature": 23.71,
    "target": 0,
    "power": 0
  },
  "gcode_move": {
    "speed_factor": 1,
    "speed": 3000,
    "extrude_factor": 1,
    "absolute_coordinates": true,
    "absolute_extrude": false,
    "homing_origin": [
      0,
      0,
      -0.21,
      0
    ],
    "position": [
      175,
      348,
      68.44541986487924,
      3612.3210499996244
    ],
    "gcode_position": [
      175,
      348,
      68.65541986487924,
      10.000319999991461
    ]
  },
  "probe": {
    "name": "probe",
    "last_query": false,
    "last_z_result": 0
  },
  "fan": {
    "speed": 0,
    "rpm": null
  },
  "heater_fan hotend_fan": {
    "speed": 0,
    "rpm": null
  },
  "controller_fan controller_fan": {
    "speed": 0,
    "rpm": null
  },
  "temperature_fan exhaust_fan": {
    "speed": 0,
    "rpm": null,
    "temperature": 22.09,
    "target": 35
  },
  "temperature_host pi_temp": {
    "temperature": 52.09
  },
  "temperature_fan pi_temp": {
    "speed": 0,
    "rpm": null,
    "temperature": 52.09,
    "target": 55
  },
  "pause_resume": {
    "is_paused": false
  },
  "filament_switch_sensor runout_sensor": {
    "filament_detected": true,
    "enabled": true
  },
  "led case_light": {
    "color_data": [
      [
        0,
        0,
        0,
        0
      ]
    ]
  },
  "idle_timeout": {
    "state": "Idle",
    "printing_time": 0
  },
  "quad_gantry_level": {
    "applied": false
  },
  "menu": {
    "timeout": 0,
    "running": false,
    "rows": 4,
    "cols": 16
  },
  "display_status": {
    "progress": 1,
    "message": "Printing"
  },
  "neopixel btt_mini12864": {
    "color_data": [
      [
        0,
        0.2,
        0,
        0
      ],
      [
        0,
        0.2,
        0,
        0
      ],
      [
        0,
        0.2,
        0,
        0
      ]
    ]
  },
  "bed_mesh": {
    "profile_name": "",
    "mesh_min": [
      0,
      0
    ],
    "mesh_max": [
      0,
      0
    ],
    "probed_matrix": [
      []
    ],
    "mesh_matrix": [
      []
    ],
    "profiles": {
      "default": {
        "points": [
          [
            -0.02125,
            -0.035,
            -0.03875,
            -0.04,
            -0.03
          ],
          [
            -0.01625,
            -0.04125,
            -0.04,
            -0.0475,
            -0.03125
          ],
          [
            0.015,
            -0.0025,
            0,
            -0.00625,
            0.01875
          ],
          [
            0.0225,
            0.01,
            0.00625,
            -0.00875,
            0.0175
          ],
          [
            0.02125,
            0.01875,
            0.0125,
            -0.005,
            0.0375
          ]
        ],
        "mesh_params": {
          "x_count": 5,
          "y_count": 5,
          "mesh_x_pps": 2,
          "mesh_y_pps": 2,
          "algo": "lagrange",
          "tension": 0.2,
          "min_x": 15,
          "max_x": 320,
          "min_y": 35,
          "max_y": 320
        }
      }
    }
  },
  "exclude_object": {
    "objects": [
      {
        "name": "CYL_STL_ID_0_COPY_0",
        "center": [
          98.715,
          99.665
        ],
        "polygon": [
          [
            90.955,
            91.932
          ],
          [
            90.955,
            107.467
          ],
          [
            106.49,
            107.467
          ],
          [
            106.49,
            91.932
          ]
        ]
      }
    ],
    "excluded_objects": [],
    "current_object": null
  },
  "gcode_macro PRINT_START_CHECK": {},
  "gcode_macro PARK": {},
  "gcode_macro G32": {},
  "gcode_macro PRINT_START": {},
  "gcode_macro G28": {},
  "gcode_macro PRINT_END": {},
  "gcode_macro TEST_SPEED": {},
  "print_stats": {
    "filename": "cyl.gcode",
    "total_duration": 1813.3924644188955,
    "print_duration": 1589.8951495899819,
    "filament_used": 3617.3210499996244,
    "state": "complete",
    "message": "",
    "info": {
      "total_layer": null,
      "current_layer": null
    }
  },
  "virtual_sdcard": {
    "file_path": null,
    "progress": 1,
    "is_active": false,
    "file_position": 4297995,
    "file_size": 4297995
  },
  "gcode_macro CANCEL_PRINT": {},
  "gcode_macro PAUSE": {},
  "gcode_macro RESUME": {
    "last_extruder_temp": 0
  },
  "gcode_macro SET_PAUSE_NEXT_LAYER": {},
  "gcode_macro SET_PAUSE_AT_LAYER": {},
  "gcode_macro SET_PRINT_STATS_INFO": {
    "pause_next_layer": {
      "enable": false,
      "call": "PAUSE"
    },
    "pause_at_layer": {
      "enable": false,
      "layer": 0,
      "call": "PAUSE"
    }
  },
  "gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL": {},
  "gcode_macro _CLIENT_EXTRUDE": {},
  "gcode_macro _CLIENT_RETRACT": {},
  "gcode_macro GET_TIMELAPSE_SETUP": {},
  "gcode_macro _SET_TIMELAPSE_SETUP": {},
  "gcode_macro TIMELAPSE_TAKE_FRAME": {
    "enable": true,
    "takingframe": false,
    "park": {
      "enable": false,
      "pos": "back_left",
      "time": 0.1,
      "custom": {
        "x": 10,
        "y": 10,
        "dz": 0
      },
      "coord": {
        "x": 0,
        "y": 350,
        "dz": 0
      }
    },
    "extruder": {
      "fw_retract": false,
      "retract": 1,
      "extrude": 1
    },
    "speed": {
      "travel": 100,
      "retract": 15,
      "extrude": 15
    },
    "verbose": false,
    "restore": {
      "absolute": {
        "coordinates": true,
        "extrude": true
      },
      "speed": 1500,
      "e": 0,
      "factor": {
        "speed": 1,
        "extrude": 1
      }
    },
    "macro": {
      "pause": "PAUSE_BASE",
      "resume": "RESUME_BASE"
    },
    "is_paused": false
  },
  "gcode_macro _TIMELAPSE_NEW_FRAME": {},
  "gcode_macro HYPERLAPSE": {
    "cycle": 30,
    "run": false
  },
  "gcode_macro TIMELAPSE_RENDER": {
    "render": false,
    "run_identifier": 0
  },
  "gcode_macro TEST_STREAM_DELAY": {},
  "neopixel sb_leds": {
    "color_data": [
      [
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0
      ]
    ]
  },
  "gcode_macro _sb_vars": {
    "colors": {
      "logo": {
        "busy": {
          "r": 0.4,
          "g": 0,
          "b": 0,
          "w": 0
        },
        "cleaning": {
          "r": 0,
          "g": 0.02,
          "b": 0.5,
          "w": 0
        },
        "calibrating_z": {
          "r": 0.8,
          "g": 0,
          "b": 0.35,
          "w": 0
        },
        "heating": {
          "r": 0.3,
          "g": 0.18,
          "b": 0,
          "w": 0
        },
        "homing": {
          "r": 0,
          "g": 0.6,
          "b": 0.2,
          "w": 0
        },
        "leveling": {
          "r": 0.5,
          "g": 0.1,
          "b": 0.4,
          "w": 0
        },
        "meshing": {
          "r": 0.2,
          "g": 1,
          "b": 0,
          "w": 0
        },
        "off": {
          "r": 0,
          "g": 0,
          "b": 0,
          "w": 0
        },
        "printing": {
          "r": 1,
          "g": 0,
          "b": 0,
          "w": 0
        },
        "standby": {
          "r": 0.01,
          "g": 0.01,
          "b": 0.01,
          "w": 0.1
        }
      },
      "nozzle": {
        "heating": {
          "r": 0.8,
          "g": 0.35,
          "b": 0,
          "w": 0
        },
        "off": {
          "r": 0,
          "g": 0,
          "b": 0,
          "w": 0
        },
        "on": {
          "r": 0.8,
          "g": 0.8,
          "b": 0.8,
          "w": 1
        },
        "standby": {
          "r": 0.6,
          "g": 0,
          "b": 0,
          "w": 0
        },
        "printing": {
          "r": 1,
          "g": 1,
          "b": 1,
          "w": 1
        }
      },
      "thermal": {
        "hot": {
          "r": 1,
          "g": 0,
          "b": 0,
          "w": 0
        },
        "cold": {
          "r": 0.3,
          "g": 0,
          "b": 0.3,
          "w": 0
        }
      }
    },
    "logo_led_name": "sb_leds",
    "logo_idx": "1",
    "nozzle_led_name": "sb_leds",
    "nozzle_idx": "2,3",
    "thermal_config": {
      "extruder": {
        "cool_temp": 40,
        "leds": "logo"
      },
      "heater_bed": {
        "cool_temp": 40,
        "leds": "nozzle"
      }
    }
  },
  "gcode_macro _set_sb_leds": {},
  "gcode_macro _set_sb_leds_by_name": {},
  "gcode_macro _set_logo_leds": {},
  "gcode_macro _set_nozzle_leds": {},
  "gcode_macro set_logo_leds_off": {},
  "gcode_macro set_nozzle_leds_on": {},
  "gcode_macro set_nozzle_leds_off": {},
  "gcode_macro status_off": {},
  "gcode_macro status_ready": {},
  "gcode_macro status_busy": {},
  "gcode_macro status_heating": {},
  "gcode_macro status_leveling": {},
  "gcode_macro status_homing": {},
  "gcode_macro status_cleaning": {},
  "gcode_macro status_meshing": {},
  "gcode_macro status_calibrating_z": {},
  "gcode_macro status_printing": {},
  "motion_report": {
    "live_position": [
      175.00000000000003,
      348,
      68.44541986487924,
      3612.321049999625
    ],
    "live_velocity": 0,
    "live_extruder_velocity": -3.552713678800501e-15,
    "steppers": [
      "extruder",
      "stepper_x",
      "stepper_y",
      "stepper_z",
      "stepper_z1",
      "stepper_z2",
      "stepper_z3"
    ],
    "trapq": [
      "extruder",
      "toolhead"
    ]
  },
  "query_endstops": {
    "last_query": {}
  },
  "system_stats": {
    "sysload": 0.08,
    "cputime": 47352.379357924,
    "memavail": 3420232
  },
  "manual_probe": {
    "is_active": false,
    "z_position": null,
    "z_position_lower": null,
    "z_position_upper": null
  },
  "toolhead": {
    "homed_axes": "",
    "axis_minimum": [
      0,
      0,
      -5,
      0
    ],
    "axis_maximum": [
      350,
      350,
      310,
      0
    ],
    "print_time": 100737.6099078889,
    "stalls": 0,
    "estimated_print_time": 107432.36982923889,
    "extruder": "extruder",
    "position": [
      175,
      348,
      68.44541986487924,
      3612.3210499996244
    ],
    "max_velocity": 600,
    "max_accel": 6000,
    "max_accel_to_decel": 3000,
    "square_corner_velocity": 5
  },
  "extruder": {
    "temperature": 24.11,
    "target": 0,
    "power": 0,
    "can_extrude": false,
    "pressure_advance": 0.025,
    "smooth_time": 0.04,
    "motion_queue": null
  }
}
